#version 450 core
#extension GL_EXT_scalar_block_layout : require

#include "compute_vertex_values.comp"

layout(set = 1, binding = 0, std430) buffer ActiveVoxels {
    uint active_voxels[];
};

layout(set = 1, binding = 1, std430) buffer NumVerts {
    uint num_verts[];
};

layout(set = 1, binding = 2, scalar) uniform TriTable {
    int tri_table[256 * 16];
};

void main(void) {
    const uint voxel_id = active_voxels[gl_GlobalInvocationID.x];
    const float values[8] = compute_vertex_values(voxel_id_to_voxel(voxel_id));
    uint case_index = 0;
    for (int i = 0; i < 8; ++i) {
        if (values[i] <= isovalue) {
            case_index |= 1 << i;
        }
    }

	uint nverts = 0;
	// The triangle table gives us the mapping from index to actual
	// triangles to return for this configuration
    const uint base_index = case_index * 16;
	for (uint t = 0; tri_table[base_index + t] != -1; ++t) {
		++nverts;
	}
	num_verts[gl_GlobalInvocationID.x] = nverts;
}

